`timescale 1ns / 1ps

module uart_rx (
    input clk,
    input reset,
    input rx,
    output reg [7:0] data_out,
    output reg rx_done
);
    reg [3:0] state;
    reg [2:0] bit_index;
    reg [7:0] shift_reg;

    parameter IDLE=0, START=1, DATA=2, STOP=3, DONE=4;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            data_out <= 8'd0;
            rx_done <= 0;
            bit_index <= 0;
        end else begin
            case (state)
                IDLE: begin
                    rx_done <= 0;
                    if (rx == 0) state <= START; // Start bit detected
                end
                START: state <= DATA;
                DATA: begin
                    shift_reg[bit_index] <= rx;
                    if (bit_index == 7)
                        state <= STOP;
                    else
                        bit_index <= bit_index + 1;
                end
                STOP: begin
                    state <= DONE;
                end
                DONE: begin
                    data_out <= shift_reg;
                    rx_done <= 1;
                    state <= IDLE;
                end
            endcase
        end
    end
endmodule
module uart_rx_tb;
 reg clk,reset;
 reg rx;
 wire [7:0] data_out;
 wire rx_done;
 
 uart m1(clk,reset,rx,data_out,rx_done);

 always#10 clk=~clk;
 
 initial
 begin
 clk=0;
 reset=1'b1;
 rx=8;
 
 #20 rx=1;
 #20 rx=0;
 #20 rx=1;
    
     // End simulation
     #20 $finish;
 end
 
 endmodule
